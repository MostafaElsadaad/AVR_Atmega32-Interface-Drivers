
AVR Interface Drivers NTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00000d1c  00000db0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800084  00800084  00000dd4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001af8  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf3  00000000  00000000  00002b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e62  00000000  00000000  00003713  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000558  00000000  00000000  00004578  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000078c  00000000  00000000  00004ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001478  00000000  00000000  0000525c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  000066d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__ctors_end>
   4:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__vector_1>
   8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
   c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  10:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  14:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  18:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  1c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  20:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  24:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  28:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__vector_10>
  2c:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__vector_11>
  30:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  34:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  38:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  3c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  40:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_16>
  44:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  48:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  4c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  50:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  54:	63 01       	movw	r12, r6
  56:	63 01       	movw	r12, r6
  58:	63 01       	movw	r12, r6
  5a:	63 01       	movw	r12, r6
  5c:	63 01       	movw	r12, r6
  5e:	63 01       	movw	r12, r6
  60:	63 01       	movw	r12, r6
  62:	63 01       	movw	r12, r6
  64:	e7 01       	movw	r28, r14
  66:	e7 01       	movw	r28, r14
  68:	71 01       	movw	r14, r2
  6a:	71 01       	movw	r14, r2
  6c:	71 01       	movw	r14, r2
  6e:	71 01       	movw	r14, r2
  70:	71 01       	movw	r14, r2
  72:	71 01       	movw	r14, r2
  74:	71 01       	movw	r14, r2
  76:	71 01       	movw	r14, r2
  78:	e7 01       	movw	r28, r14
  7a:	e7 01       	movw	r28, r14
  7c:	81 01       	movw	r16, r2
  7e:	81 01       	movw	r16, r2
  80:	81 01       	movw	r16, r2
  82:	81 01       	movw	r16, r2
  84:	81 01       	movw	r16, r2
  86:	81 01       	movw	r16, r2
  88:	81 01       	movw	r16, r2
  8a:	81 01       	movw	r16, r2
  8c:	e7 01       	movw	r28, r14
  8e:	e7 01       	movw	r28, r14
  90:	91 01       	movw	r18, r2
  92:	91 01       	movw	r18, r2
  94:	91 01       	movw	r18, r2
  96:	91 01       	movw	r18, r2
  98:	91 01       	movw	r18, r2
  9a:	91 01       	movw	r18, r2
  9c:	91 01       	movw	r18, r2
  9e:	91 01       	movw	r18, r2
  a0:	ae 01       	movw	r20, r28
  a2:	ae 01       	movw	r20, r28
  a4:	ae 01       	movw	r20, r28
  a6:	ae 01       	movw	r20, r28
  a8:	ae 01       	movw	r20, r28
  aa:	ae 01       	movw	r20, r28
  ac:	ae 01       	movw	r20, r28
  ae:	ae 01       	movw	r20, r28
  b0:	e7 01       	movw	r28, r14
  b2:	e7 01       	movw	r28, r14
  b4:	bb 01       	movw	r22, r22
  b6:	bb 01       	movw	r22, r22
  b8:	bb 01       	movw	r22, r22
  ba:	bb 01       	movw	r22, r22
  bc:	bb 01       	movw	r22, r22
  be:	bb 01       	movw	r22, r22
  c0:	bb 01       	movw	r22, r22
  c2:	bb 01       	movw	r22, r22
  c4:	e7 01       	movw	r28, r14
  c6:	e7 01       	movw	r28, r14
  c8:	ca 01       	movw	r24, r20
  ca:	ca 01       	movw	r24, r20
  cc:	ca 01       	movw	r24, r20
  ce:	ca 01       	movw	r24, r20
  d0:	ca 01       	movw	r24, r20
  d2:	ca 01       	movw	r24, r20
  d4:	ca 01       	movw	r24, r20
  d6:	ca 01       	movw	r24, r20
  d8:	e7 01       	movw	r28, r14
  da:	e7 01       	movw	r28, r14
  dc:	d9 01       	movw	r26, r18
  de:	d9 01       	movw	r26, r18
  e0:	d9 01       	movw	r26, r18
  e2:	d9 01       	movw	r26, r18
  e4:	d9 01       	movw	r26, r18
  e6:	d9 01       	movw	r26, r18
  e8:	d9 01       	movw	r26, r18
  ea:	d9 01       	movw	r26, r18
  ec:	f6 01       	movw	r30, r12
  ee:	f6 01       	movw	r30, r12
  f0:	f6 01       	movw	r30, r12
  f2:	f6 01       	movw	r30, r12
  f4:	f6 01       	movw	r30, r12
  f6:	f6 01       	movw	r30, r12
  f8:	f6 01       	movw	r30, r12
  fa:	f6 01       	movw	r30, r12
  fc:	d2 02       	muls	r29, r18
  fe:	d2 02       	muls	r29, r18
 100:	04 02       	muls	r16, r20
 102:	04 02       	muls	r16, r20
 104:	04 02       	muls	r16, r20
 106:	04 02       	muls	r16, r20
 108:	04 02       	muls	r16, r20
 10a:	04 02       	muls	r16, r20
 10c:	04 02       	muls	r16, r20
 10e:	04 02       	muls	r16, r20
 110:	d2 02       	muls	r29, r18
 112:	d2 02       	muls	r29, r18
 114:	14 02       	muls	r17, r20
 116:	14 02       	muls	r17, r20
 118:	14 02       	muls	r17, r20
 11a:	14 02       	muls	r17, r20
 11c:	14 02       	muls	r17, r20
 11e:	14 02       	muls	r17, r20
 120:	14 02       	muls	r17, r20
 122:	14 02       	muls	r17, r20
 124:	d2 02       	muls	r29, r18
 126:	d2 02       	muls	r29, r18
 128:	24 02       	muls	r18, r20
 12a:	24 02       	muls	r18, r20
 12c:	24 02       	muls	r18, r20
 12e:	24 02       	muls	r18, r20
 130:	24 02       	muls	r18, r20
 132:	24 02       	muls	r18, r20
 134:	24 02       	muls	r18, r20
 136:	24 02       	muls	r18, r20
 138:	42 02       	muls	r20, r18
 13a:	42 02       	muls	r20, r18
 13c:	42 02       	muls	r20, r18
 13e:	42 02       	muls	r20, r18
 140:	42 02       	muls	r20, r18
 142:	42 02       	muls	r20, r18
 144:	42 02       	muls	r20, r18
 146:	42 02       	muls	r20, r18
 148:	d2 02       	muls	r29, r18
 14a:	d2 02       	muls	r29, r18
 14c:	4f 02       	muls	r20, r31
 14e:	4f 02       	muls	r20, r31
 150:	4f 02       	muls	r20, r31
 152:	4f 02       	muls	r20, r31
 154:	4f 02       	muls	r20, r31
 156:	4f 02       	muls	r20, r31
 158:	4f 02       	muls	r20, r31
 15a:	4f 02       	muls	r20, r31
 15c:	d2 02       	muls	r29, r18
 15e:	d2 02       	muls	r29, r18
 160:	5e 02       	muls	r21, r30
 162:	5e 02       	muls	r21, r30
 164:	5e 02       	muls	r21, r30
 166:	5e 02       	muls	r21, r30
 168:	5e 02       	muls	r21, r30
 16a:	5e 02       	muls	r21, r30
 16c:	5e 02       	muls	r21, r30
 16e:	5e 02       	muls	r21, r30
 170:	d2 02       	muls	r29, r18
 172:	d2 02       	muls	r29, r18
 174:	6d 02       	muls	r22, r29
 176:	6d 02       	muls	r22, r29
 178:	6d 02       	muls	r22, r29
 17a:	6d 02       	muls	r22, r29
 17c:	6d 02       	muls	r22, r29
 17e:	6d 02       	muls	r22, r29
 180:	6d 02       	muls	r22, r29
 182:	6d 02       	muls	r22, r29
 184:	8a 02       	muls	r24, r26
 186:	8a 02       	muls	r24, r26
 188:	8a 02       	muls	r24, r26
 18a:	8a 02       	muls	r24, r26
 18c:	8a 02       	muls	r24, r26
 18e:	8a 02       	muls	r24, r26
 190:	8a 02       	muls	r24, r26
 192:	8a 02       	muls	r24, r26
 194:	d2 02       	muls	r29, r18
 196:	d2 02       	muls	r29, r18
 198:	9a 02       	muls	r25, r26
 19a:	9a 02       	muls	r25, r26
 19c:	9a 02       	muls	r25, r26
 19e:	9a 02       	muls	r25, r26
 1a0:	9a 02       	muls	r25, r26
 1a2:	9a 02       	muls	r25, r26
 1a4:	9a 02       	muls	r25, r26
 1a6:	9a 02       	muls	r25, r26
 1a8:	d2 02       	muls	r29, r18
 1aa:	d2 02       	muls	r29, r18
 1ac:	ad 02       	muls	r26, r29
 1ae:	ad 02       	muls	r26, r29
 1b0:	ad 02       	muls	r26, r29
 1b2:	ad 02       	muls	r26, r29
 1b4:	ad 02       	muls	r26, r29
 1b6:	ad 02       	muls	r26, r29
 1b8:	ad 02       	muls	r26, r29
 1ba:	ad 02       	muls	r26, r29
 1bc:	d2 02       	muls	r29, r18
 1be:	d2 02       	muls	r29, r18
 1c0:	c0 02       	muls	r28, r16
 1c2:	c0 02       	muls	r28, r16
 1c4:	c0 02       	muls	r28, r16
 1c6:	c0 02       	muls	r28, r16
 1c8:	c0 02       	muls	r28, r16
 1ca:	c0 02       	muls	r28, r16
 1cc:	c0 02       	muls	r28, r16
 1ce:	c0 02       	muls	r28, r16
 1d0:	33 04       	cpc	r3, r3
 1d2:	3d 04       	cpc	r3, r13
 1d4:	47 04       	cpc	r4, r7
 1d6:	51 04       	cpc	r5, r1
 1d8:	5b 04       	cpc	r5, r11
 1da:	65 04       	cpc	r6, r5
 1dc:	6f 04       	cpc	r6, r15
 1de:	79 04       	cpc	r7, r9
 1e0:	83 04       	cpc	r8, r3
 1e2:	8d 04       	cpc	r8, r13

000001e4 <__ctors_end>:
 1e4:	11 24       	eor	r1, r1
 1e6:	1f be       	out	0x3f, r1	; 63
 1e8:	cf e5       	ldi	r28, 0x5F	; 95
 1ea:	d8 e0       	ldi	r29, 0x08	; 8
 1ec:	de bf       	out	0x3e, r29	; 62
 1ee:	cd bf       	out	0x3d, r28	; 61

000001f0 <__do_copy_data>:
 1f0:	10 e0       	ldi	r17, 0x00	; 0
 1f2:	a0 e6       	ldi	r26, 0x60	; 96
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	ec e1       	ldi	r30, 0x1C	; 28
 1f8:	fd e0       	ldi	r31, 0x0D	; 13
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <__do_copy_data+0x10>
 1fc:	05 90       	lpm	r0, Z+
 1fe:	0d 92       	st	X+, r0
 200:	a4 38       	cpi	r26, 0x84	; 132
 202:	b1 07       	cpc	r27, r17
 204:	d9 f7       	brne	.-10     	; 0x1fc <__do_copy_data+0xc>

00000206 <__do_clear_bss>:
 206:	20 e0       	ldi	r18, 0x00	; 0
 208:	a4 e8       	ldi	r26, 0x84	; 132
 20a:	b0 e0       	ldi	r27, 0x00	; 0
 20c:	01 c0       	rjmp	.+2      	; 0x210 <.do_clear_bss_start>

0000020e <.do_clear_bss_loop>:
 20e:	1d 92       	st	X+, r1

00000210 <.do_clear_bss_start>:
 210:	ac 38       	cpi	r26, 0x8C	; 140
 212:	b2 07       	cpc	r27, r18
 214:	e1 f7       	brne	.-8      	; 0x20e <.do_clear_bss_loop>
 216:	0e 94 a4 04 	call	0x948	; 0x948 <main>
 21a:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <_exit>

0000021e <__bad_interrupt>:
 21e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000222 <ADC_Init>:

void ADC_INT_voidCallBack(void (*addresscpy)(void))
{
	if(addresscpy != NULL)
	{
		ADCX = addresscpy;
 222:	87 e8       	ldi	r24, 0x87	; 135
 224:	86 b9       	out	0x06, r24	; 6
 226:	80 e4       	ldi	r24, 0x40	; 64
 228:	87 b9       	out	0x07, r24	; 7
 22a:	08 95       	ret

0000022c <ADC_Read>:
 22c:	97 b1       	in	r25, 0x07	; 7
 22e:	8f 70       	andi	r24, 0x0F	; 15
 230:	98 2b       	or	r25, r24
 232:	97 b9       	out	0x07, r25	; 7
 234:	86 b1       	in	r24, 0x06	; 6
 236:	80 64       	ori	r24, 0x40	; 64
 238:	86 b9       	out	0x06, r24	; 6
 23a:	34 9b       	sbis	0x06, 4	; 6
 23c:	fe cf       	rjmp	.-4      	; 0x23a <ADC_Read+0xe>
 23e:	85 e3       	ldi	r24, 0x35	; 53
 240:	8a 95       	dec	r24
 242:	f1 f7       	brne	.-4      	; 0x240 <ADC_Read+0x14>
 244:	00 00       	nop
 246:	24 b1       	in	r18, 0x04	; 4
 248:	85 b1       	in	r24, 0x05	; 5
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	98 2f       	mov	r25, r24
 24e:	88 27       	eor	r24, r24
 250:	a0 e0       	ldi	r26, 0x00	; 0
 252:	b0 e0       	ldi	r27, 0x00	; 0
 254:	82 0f       	add	r24, r18
 256:	91 1d       	adc	r25, r1
 258:	a1 1d       	adc	r26, r1
 25a:	b1 1d       	adc	r27, r1
 25c:	08 95       	ret

0000025e <__vector_16>:

void __vector_16(void) __attribute__(( signal , used ));


void __vector_16(void)
{
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	2f 93       	push	r18
 26a:	3f 93       	push	r19
 26c:	4f 93       	push	r20
 26e:	5f 93       	push	r21
 270:	6f 93       	push	r22
 272:	7f 93       	push	r23
 274:	8f 93       	push	r24
 276:	9f 93       	push	r25
 278:	af 93       	push	r26
 27a:	bf 93       	push	r27
 27c:	ef 93       	push	r30
 27e:	ff 93       	push	r31

	ADCX();
 280:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <__data_end>
 284:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <__data_end+0x1>
 288:	09 95       	icall
	
 28a:	ff 91       	pop	r31
 28c:	ef 91       	pop	r30
 28e:	bf 91       	pop	r27
 290:	af 91       	pop	r26
 292:	9f 91       	pop	r25
 294:	8f 91       	pop	r24
 296:	7f 91       	pop	r23
 298:	6f 91       	pop	r22
 29a:	5f 91       	pop	r21
 29c:	4f 91       	pop	r20
 29e:	3f 91       	pop	r19
 2a0:	2f 91       	pop	r18
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <digitalWrite>:
}


u8 digitalWrite(u8 pin,u8 value){  // Sets Pin Value

	if(value == LOW)
 2ac:	61 11       	cpse	r22, r1
 2ae:	49 c0       	rjmp	.+146    	; 0x342 <digitalWrite+0x96>
	switch(pin){
 2b0:	48 2f       	mov	r20, r24
 2b2:	50 e0       	ldi	r21, 0x00	; 0
 2b4:	46 32       	cpi	r20, 0x26	; 38
 2b6:	51 05       	cpc	r21, r1
 2b8:	08 f0       	brcs	.+2      	; 0x2bc <digitalWrite+0x10>
 2ba:	89 c0       	rjmp	.+274    	; 0x3ce <digitalWrite+0x122>
 2bc:	fa 01       	movw	r30, r20
 2be:	e6 5d       	subi	r30, 0xD6	; 214
 2c0:	ff 4f       	sbci	r31, 0xFF	; 255
 2c2:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__tablejump2__>
		case PA0 ... PA7: CLR_bit(PORTA,pin);		break;
 2c6:	4b b3       	in	r20, 0x1b	; 27
 2c8:	21 e0       	ldi	r18, 0x01	; 1
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	b9 01       	movw	r22, r18
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <digitalWrite+0x28>
 2d0:	66 0f       	add	r22, r22
 2d2:	77 1f       	adc	r23, r23
 2d4:	8a 95       	dec	r24
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <digitalWrite+0x24>
 2d8:	cb 01       	movw	r24, r22
 2da:	80 95       	com	r24
 2dc:	84 23       	and	r24, r20
 2de:	8b bb       	out	0x1b, r24	; 27
 2e0:	76 c0       	rjmp	.+236    	; 0x3ce <digitalWrite+0x122>
		case PB0 ... PB7: CLR_bit(PORTB,(pin-PB0)); break;
 2e2:	48 b3       	in	r20, 0x18	; 24
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0a 97       	sbiw	r24, 0x0a	; 10
 2e8:	21 e0       	ldi	r18, 0x01	; 1
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	b9 01       	movw	r22, r18
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <digitalWrite+0x48>
 2f0:	66 0f       	add	r22, r22
 2f2:	77 1f       	adc	r23, r23
 2f4:	8a 95       	dec	r24
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <digitalWrite+0x44>
 2f8:	cb 01       	movw	r24, r22
 2fa:	80 95       	com	r24
 2fc:	84 23       	and	r24, r20
 2fe:	88 bb       	out	0x18, r24	; 24
 300:	66 c0       	rjmp	.+204    	; 0x3ce <digitalWrite+0x122>
		case PC0 ... PC7: CLR_bit(PORTC,(pin-PC0)); break;
 302:	45 b3       	in	r20, 0x15	; 21
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	44 97       	sbiw	r24, 0x14	; 20
 308:	21 e0       	ldi	r18, 0x01	; 1
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	b9 01       	movw	r22, r18
 30e:	02 c0       	rjmp	.+4      	; 0x314 <digitalWrite+0x68>
 310:	66 0f       	add	r22, r22
 312:	77 1f       	adc	r23, r23
 314:	8a 95       	dec	r24
 316:	e2 f7       	brpl	.-8      	; 0x310 <digitalWrite+0x64>
 318:	cb 01       	movw	r24, r22
 31a:	80 95       	com	r24
 31c:	84 23       	and	r24, r20
 31e:	85 bb       	out	0x15, r24	; 21
 320:	56 c0       	rjmp	.+172    	; 0x3ce <digitalWrite+0x122>
		case PD0 ... PD7: CLR_bit(PORTD,(pin-PD0)); break;
 322:	42 b3       	in	r20, 0x12	; 18
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	4e 97       	sbiw	r24, 0x1e	; 30
 328:	21 e0       	ldi	r18, 0x01	; 1
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	b9 01       	movw	r22, r18
 32e:	02 c0       	rjmp	.+4      	; 0x334 <digitalWrite+0x88>
 330:	66 0f       	add	r22, r22
 332:	77 1f       	adc	r23, r23
 334:	8a 95       	dec	r24
 336:	e2 f7       	brpl	.-8      	; 0x330 <digitalWrite+0x84>
 338:	cb 01       	movw	r24, r22
 33a:	80 95       	com	r24
 33c:	84 23       	and	r24, r20
 33e:	82 bb       	out	0x12, r24	; 18
 340:	46 c0       	rjmp	.+140    	; 0x3ce <digitalWrite+0x122>
		default: break;
	}
	
	else if(value == HIGH){
 342:	61 30       	cpi	r22, 0x01	; 1
 344:	09 f0       	breq	.+2      	; 0x348 <digitalWrite+0x9c>
 346:	43 c0       	rjmp	.+134    	; 0x3ce <digitalWrite+0x122>
		switch(pin){
 348:	48 2f       	mov	r20, r24
 34a:	50 e0       	ldi	r21, 0x00	; 0
 34c:	46 32       	cpi	r20, 0x26	; 38
 34e:	51 05       	cpc	r21, r1
 350:	f0 f5       	brcc	.+124    	; 0x3ce <digitalWrite+0x122>
 352:	fa 01       	movw	r30, r20
 354:	e0 5b       	subi	r30, 0xB0	; 176
 356:	ff 4f       	sbci	r31, 0xFF	; 255
 358:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__tablejump2__>
		case PA0 ... PA7: SET_bit(PORTA,pin);	    break;
 35c:	4b b3       	in	r20, 0x1b	; 27
 35e:	21 e0       	ldi	r18, 0x01	; 1
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	b9 01       	movw	r22, r18
 364:	02 c0       	rjmp	.+4      	; 0x36a <digitalWrite+0xbe>
 366:	66 0f       	add	r22, r22
 368:	77 1f       	adc	r23, r23
 36a:	8a 95       	dec	r24
 36c:	e2 f7       	brpl	.-8      	; 0x366 <digitalWrite+0xba>
 36e:	cb 01       	movw	r24, r22
 370:	84 2b       	or	r24, r20
 372:	8b bb       	out	0x1b, r24	; 27
 374:	2c c0       	rjmp	.+88     	; 0x3ce <digitalWrite+0x122>
		case PB0 ... PB7: SET_bit(PORTB,(pin-PB0)); break;
 376:	48 b3       	in	r20, 0x18	; 24
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0a 97       	sbiw	r24, 0x0a	; 10
 37c:	21 e0       	ldi	r18, 0x01	; 1
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	b9 01       	movw	r22, r18
 382:	02 c0       	rjmp	.+4      	; 0x388 <digitalWrite+0xdc>
 384:	66 0f       	add	r22, r22
 386:	77 1f       	adc	r23, r23
 388:	8a 95       	dec	r24
 38a:	e2 f7       	brpl	.-8      	; 0x384 <digitalWrite+0xd8>
 38c:	cb 01       	movw	r24, r22
 38e:	84 2b       	or	r24, r20
 390:	88 bb       	out	0x18, r24	; 24
 392:	1d c0       	rjmp	.+58     	; 0x3ce <digitalWrite+0x122>
		case PC0 ... PC7: SET_bit(PORTC,(pin-PC0)); break;
 394:	45 b3       	in	r20, 0x15	; 21
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	44 97       	sbiw	r24, 0x14	; 20
 39a:	21 e0       	ldi	r18, 0x01	; 1
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	b9 01       	movw	r22, r18
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <digitalWrite+0xfa>
 3a2:	66 0f       	add	r22, r22
 3a4:	77 1f       	adc	r23, r23
 3a6:	8a 95       	dec	r24
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <digitalWrite+0xf6>
 3aa:	cb 01       	movw	r24, r22
 3ac:	84 2b       	or	r24, r20
 3ae:	85 bb       	out	0x15, r24	; 21
 3b0:	0e c0       	rjmp	.+28     	; 0x3ce <digitalWrite+0x122>
		case PD0 ... PD7: SET_bit(PORTD,(pin-PD0)); break;
 3b2:	42 b3       	in	r20, 0x12	; 18
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	4e 97       	sbiw	r24, 0x1e	; 30
 3b8:	21 e0       	ldi	r18, 0x01	; 1
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	b9 01       	movw	r22, r18
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <digitalWrite+0x118>
 3c0:	66 0f       	add	r22, r22
 3c2:	77 1f       	adc	r23, r23
 3c4:	8a 95       	dec	r24
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <digitalWrite+0x114>
 3c8:	cb 01       	movw	r24, r22
 3ca:	84 2b       	or	r24, r20
 3cc:	82 bb       	out	0x12, r24	; 18
	else{
		//for error handling later
	}
	
	return 0;
}
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	08 95       	ret

000003d2 <pinMode>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"

u8 pinMode(u8 pin,u8 direction){  // Sets Pin Direction

	if(direction == INPUT)
 3d2:	61 11       	cpse	r22, r1
 3d4:	49 c0       	rjmp	.+146    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
		switch(pin){
 3d6:	48 2f       	mov	r20, r24
 3d8:	50 e0       	ldi	r21, 0x00	; 0
 3da:	46 32       	cpi	r20, 0x26	; 38
 3dc:	51 05       	cpc	r21, r1
 3de:	08 f0       	brcs	.+2      	; 0x3e2 <pinMode+0x10>
 3e0:	e1 c0       	rjmp	.+450    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 3e2:	fa 01       	movw	r30, r20
 3e4:	ea 58       	subi	r30, 0x8A	; 138
 3e6:	ff 4f       	sbci	r31, 0xFF	; 255
 3e8:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__tablejump2__>
			case PA0 ... PA7: CLR_bit(DDRA,pin);		 break;
 3ec:	5a b3       	in	r21, 0x1a	; 26
 3ee:	21 e0       	ldi	r18, 0x01	; 1
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	b9 01       	movw	r22, r18
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <pinMode+0x28>
 3f6:	66 0f       	add	r22, r22
 3f8:	77 1f       	adc	r23, r23
 3fa:	8a 95       	dec	r24
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <pinMode+0x24>
 3fe:	cb 01       	movw	r24, r22
 400:	80 95       	com	r24
 402:	85 23       	and	r24, r21
 404:	8a bb       	out	0x1a, r24	; 26
 406:	ce c0       	rjmp	.+412    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
			case PB0 ... PB7: CLR_bit(DDRB,(pin-PB0));	 break;
 408:	27 b3       	in	r18, 0x17	; 23
 40a:	48 2f       	mov	r20, r24
 40c:	50 e0       	ldi	r21, 0x00	; 0
 40e:	4a 50       	subi	r20, 0x0A	; 10
 410:	51 09       	sbc	r21, r1
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	02 c0       	rjmp	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	4a 95       	dec	r20
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 420:	80 95       	com	r24
 422:	82 23       	and	r24, r18
 424:	87 bb       	out	0x17, r24	; 23
 426:	be c0       	rjmp	.+380    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
			case PC0 ... PC7: CLR_bit(DDRC,(pin-PC0));	 break;
 428:	24 b3       	in	r18, 0x14	; 20
 42a:	48 2f       	mov	r20, r24
 42c:	50 e0       	ldi	r21, 0x00	; 0
 42e:	44 51       	subi	r20, 0x14	; 20
 430:	51 09       	sbc	r21, r1
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	02 c0       	rjmp	.+4      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	4a 95       	dec	r20
 43e:	e2 f7       	brpl	.-8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 440:	80 95       	com	r24
 442:	82 23       	and	r24, r18
 444:	84 bb       	out	0x14, r24	; 20
 446:	ae c0       	rjmp	.+348    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
			case PD0 ... PD7: CLR_bit(DDRD,(pin-PD0));	 break;
 448:	21 b3       	in	r18, 0x11	; 17
 44a:	48 2f       	mov	r20, r24
 44c:	50 e0       	ldi	r21, 0x00	; 0
 44e:	4e 51       	subi	r20, 0x1E	; 30
 450:	51 09       	sbc	r21, r1
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	02 c0       	rjmp	.+4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	4a 95       	dec	r20
 45e:	e2 f7       	brpl	.-8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 460:	80 95       	com	r24
 462:	82 23       	and	r24, r18
 464:	81 bb       	out	0x11, r24	; 17
 466:	9e c0       	rjmp	.+316    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
		}
		
	else if(direction == OUTPUT){
 468:	61 30       	cpi	r22, 0x01	; 1
 46a:	09 f0       	breq	.+2      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 46c:	45 c0       	rjmp	.+138    	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
		switch(pin){
 46e:	48 2f       	mov	r20, r24
 470:	50 e0       	ldi	r21, 0x00	; 0
 472:	46 32       	cpi	r20, 0x26	; 38
 474:	51 05       	cpc	r21, r1
 476:	08 f0       	brcs	.+2      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 478:	95 c0       	rjmp	.+298    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 47a:	fa 01       	movw	r30, r20
 47c:	e4 56       	subi	r30, 0x64	; 100
 47e:	ff 4f       	sbci	r31, 0xFF	; 255
 480:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__tablejump2__>
			case PA0 ... PA7: SET_bit(DDRA,pin);	   break;
 484:	4a b3       	in	r20, 0x1a	; 26
 486:	21 e0       	ldi	r18, 0x01	; 1
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	b9 01       	movw	r22, r18
 48c:	02 c0       	rjmp	.+4      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 48e:	66 0f       	add	r22, r22
 490:	77 1f       	adc	r23, r23
 492:	8a 95       	dec	r24
 494:	e2 f7       	brpl	.-8      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 496:	cb 01       	movw	r24, r22
 498:	84 2b       	or	r24, r20
 49a:	8a bb       	out	0x1a, r24	; 26
 49c:	83 c0       	rjmp	.+262    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
			case PB0 ... PB7: SET_bit(DDRB,(pin-PB0)); break;
 49e:	27 b3       	in	r18, 0x17	; 23
 4a0:	48 2f       	mov	r20, r24
 4a2:	50 e0       	ldi	r21, 0x00	; 0
 4a4:	4a 50       	subi	r20, 0x0A	; 10
 4a6:	51 09       	sbc	r21, r1
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	4a 95       	dec	r20
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4b6:	82 2b       	or	r24, r18
 4b8:	87 bb       	out	0x17, r24	; 23
 4ba:	74 c0       	rjmp	.+232    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
			case PC0 ... PC7: SET_bit(DDRC,(pin-PC0)); break;
 4bc:	24 b3       	in	r18, 0x14	; 20
 4be:	48 2f       	mov	r20, r24
 4c0:	50 e0       	ldi	r21, 0x00	; 0
 4c2:	44 51       	subi	r20, 0x14	; 20
 4c4:	51 09       	sbc	r21, r1
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	4a 95       	dec	r20
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4d4:	82 2b       	or	r24, r18
 4d6:	84 bb       	out	0x14, r24	; 20
 4d8:	65 c0       	rjmp	.+202    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
			case PD0 ... PD7: SET_bit(DDRD,(pin-PD0)); break;
 4da:	21 b3       	in	r18, 0x11	; 17
 4dc:	48 2f       	mov	r20, r24
 4de:	50 e0       	ldi	r21, 0x00	; 0
 4e0:	4e 51       	subi	r20, 0x1E	; 30
 4e2:	51 09       	sbc	r21, r1
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	4a 95       	dec	r20
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 4f2:	82 2b       	or	r24, r18
 4f4:	81 bb       	out	0x11, r24	; 17
 4f6:	56 c0       	rjmp	.+172    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
		}
	}
	else if(direction == INPUT_PULLUP){
 4f8:	63 30       	cpi	r22, 0x03	; 3
 4fa:	09 f0       	breq	.+2      	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 4fc:	53 c0       	rjmp	.+166    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
		switch(pin){
 4fe:	48 2f       	mov	r20, r24
 500:	50 e0       	ldi	r21, 0x00	; 0
 502:	46 32       	cpi	r20, 0x26	; 38
 504:	51 05       	cpc	r21, r1
 506:	08 f0       	brcs	.+2      	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
 508:	4d c0       	rjmp	.+154    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 50a:	fa 01       	movw	r30, r20
 50c:	ee 53       	subi	r30, 0x3E	; 62
 50e:	ff 4f       	sbci	r31, 0xFF	; 255
 510:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__tablejump2__>
			case PA0 ... PA7: CLR_bit(DDRA,pin);		 digitalWrite(pin,HIGH);	 break;
 514:	9a b3       	in	r25, 0x1a	; 26
 516:	21 e0       	ldi	r18, 0x01	; 1
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	08 2e       	mov	r0, r24
 51c:	02 c0       	rjmp	.+4      	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
 51e:	22 0f       	add	r18, r18
 520:	33 1f       	adc	r19, r19
 522:	0a 94       	dec	r0
 524:	e2 f7       	brpl	.-8      	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
 526:	20 95       	com	r18
 528:	29 23       	and	r18, r25
 52a:	2a bb       	out	0x1a, r18	; 26
 52c:	61 e0       	ldi	r22, 0x01	; 1
 52e:	0e 94 56 01 	call	0x2ac	; 0x2ac <digitalWrite>
 532:	38 c0       	rjmp	.+112    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
			case PB0 ... PB7: CLR_bit(DDRB,(pin-PB0));   digitalWrite(pin,HIGH);	 break;
 534:	97 b3       	in	r25, 0x17	; 23
 536:	48 2f       	mov	r20, r24
 538:	50 e0       	ldi	r21, 0x00	; 0
 53a:	4a 50       	subi	r20, 0x0A	; 10
 53c:	51 09       	sbc	r21, r1
 53e:	21 e0       	ldi	r18, 0x01	; 1
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	02 c0       	rjmp	.+4      	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
 544:	22 0f       	add	r18, r18
 546:	33 1f       	adc	r19, r19
 548:	4a 95       	dec	r20
 54a:	e2 f7       	brpl	.-8      	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
 54c:	20 95       	com	r18
 54e:	29 23       	and	r18, r25
 550:	27 bb       	out	0x17, r18	; 23
 552:	61 e0       	ldi	r22, 0x01	; 1
 554:	0e 94 56 01 	call	0x2ac	; 0x2ac <digitalWrite>
 558:	25 c0       	rjmp	.+74     	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
			case PC0 ... PC7: CLR_bit(DDRC,(pin-PC0));   digitalWrite(pin,HIGH);	 break;
 55a:	94 b3       	in	r25, 0x14	; 20
 55c:	48 2f       	mov	r20, r24
 55e:	50 e0       	ldi	r21, 0x00	; 0
 560:	44 51       	subi	r20, 0x14	; 20
 562:	51 09       	sbc	r21, r1
 564:	21 e0       	ldi	r18, 0x01	; 1
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	02 c0       	rjmp	.+4      	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
 56a:	22 0f       	add	r18, r18
 56c:	33 1f       	adc	r19, r19
 56e:	4a 95       	dec	r20
 570:	e2 f7       	brpl	.-8      	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
 572:	20 95       	com	r18
 574:	29 23       	and	r18, r25
 576:	24 bb       	out	0x14, r18	; 20
 578:	61 e0       	ldi	r22, 0x01	; 1
 57a:	0e 94 56 01 	call	0x2ac	; 0x2ac <digitalWrite>
 57e:	12 c0       	rjmp	.+36     	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
			case PD0 ... PD7: CLR_bit(DDRD,(pin-PD0));   digitalWrite(pin,HIGH);	 break;
 580:	91 b3       	in	r25, 0x11	; 17
 582:	48 2f       	mov	r20, r24
 584:	50 e0       	ldi	r21, 0x00	; 0
 586:	4e 51       	subi	r20, 0x1E	; 30
 588:	51 09       	sbc	r21, r1
 58a:	21 e0       	ldi	r18, 0x01	; 1
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	02 c0       	rjmp	.+4      	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
 590:	22 0f       	add	r18, r18
 592:	33 1f       	adc	r19, r19
 594:	4a 95       	dec	r20
 596:	e2 f7       	brpl	.-8      	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
 598:	20 95       	com	r18
 59a:	29 23       	and	r18, r25
 59c:	21 bb       	out	0x11, r18	; 17
 59e:	61 e0       	ldi	r22, 0x01	; 1
 5a0:	0e 94 56 01 	call	0x2ac	; 0x2ac <digitalWrite>
	else{
		//for error handling later
	}
	
	return 0;
}
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	08 95       	ret

000005a8 <__vector_1>:

void __vector_1(void) __attribute__(( signal , used ));


void __vector_1(void)
{
 5a8:	1f 92       	push	r1
 5aa:	0f 92       	push	r0
 5ac:	0f b6       	in	r0, 0x3f	; 63
 5ae:	0f 92       	push	r0
 5b0:	11 24       	eor	r1, r1
 5b2:	2f 93       	push	r18
 5b4:	3f 93       	push	r19
 5b6:	4f 93       	push	r20
 5b8:	5f 93       	push	r21
 5ba:	6f 93       	push	r22
 5bc:	7f 93       	push	r23
 5be:	8f 93       	push	r24
 5c0:	9f 93       	push	r25
 5c2:	af 93       	push	r26
 5c4:	bf 93       	push	r27
 5c6:	ef 93       	push	r30
 5c8:	ff 93       	push	r31
	x();
 5ca:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <x>
 5ce:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <x+0x1>
 5d2:	09 95       	icall
	
 5d4:	ff 91       	pop	r31
 5d6:	ef 91       	pop	r30
 5d8:	bf 91       	pop	r27
 5da:	af 91       	pop	r26
 5dc:	9f 91       	pop	r25
 5de:	8f 91       	pop	r24
 5e0:	7f 91       	pop	r23
 5e2:	6f 91       	pop	r22
 5e4:	5f 91       	pop	r21
 5e6:	4f 91       	pop	r20
 5e8:	3f 91       	pop	r19
 5ea:	2f 91       	pop	r18
 5ec:	0f 90       	pop	r0
 5ee:	0f be       	out	0x3f, r0	; 63
 5f0:	0f 90       	pop	r0
 5f2:	1f 90       	pop	r1
 5f4:	18 95       	reti

000005f6 <write4bit>:
	LCD_CLR();

}


void write4bit(u8 data){
 5f6:	cf 93       	push	r28
 5f8:	c8 2f       	mov	r28, r24
	digitalWrite(DATA_PIN4,GET_bit(data,4));
 5fa:	84 fb       	bst	r24, 4
 5fc:	66 27       	eor	r22, r22
 5fe:	60 f9       	bld	r22, 0
 600:	8a e0       	ldi	r24, 0x0A	; 10
 602:	0e 94 56 01 	call	0x2ac	; 0x2ac <digitalWrite>
	digitalWrite(DATA_PIN5,GET_bit(data,5));
 606:	c5 fb       	bst	r28, 5
 608:	66 27       	eor	r22, r22
 60a:	60 f9       	bld	r22, 0
 60c:	8b e0       	ldi	r24, 0x0B	; 11
 60e:	0e 94 56 01 	call	0x2ac	; 0x2ac <digitalWrite>
	digitalWrite(DATA_PIN6,GET_bit(data,6));
 612:	c6 fb       	bst	r28, 6
 614:	66 27       	eor	r22, r22
 616:	60 f9       	bld	r22, 0
 618:	8c e0       	ldi	r24, 0x0C	; 12
 61a:	0e 94 56 01 	call	0x2ac	; 0x2ac <digitalWrite>
	digitalWrite(DATA_PIN7,GET_bit(data,7));
 61e:	6c 2f       	mov	r22, r28
 620:	66 1f       	adc	r22, r22
 622:	66 27       	eor	r22, r22
 624:	66 1f       	adc	r22, r22
 626:	8e e0       	ldi	r24, 0x0E	; 14
 628:	0e 94 56 01 	call	0x2ac	; 0x2ac <digitalWrite>
	

	digitalWrite(EN_PIN,HIGH);
 62c:	61 e0       	ldi	r22, 0x01	; 1
 62e:	82 e0       	ldi	r24, 0x02	; 2
 630:	0e 94 56 01 	call	0x2ac	; 0x2ac <digitalWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 634:	8f e3       	ldi	r24, 0x3F	; 63
 636:	9f e1       	ldi	r25, 0x1F	; 31
 638:	01 97       	sbiw	r24, 0x01	; 1
 63a:	f1 f7       	brne	.-4      	; 0x638 <write4bit+0x42>
 63c:	00 c0       	rjmp	.+0      	; 0x63e <write4bit+0x48>
 63e:	00 00       	nop
	_delay_ms(2);
	digitalWrite(EN_PIN,LOW);
 640:	60 e0       	ldi	r22, 0x00	; 0
 642:	82 e0       	ldi	r24, 0x02	; 2
 644:	0e 94 56 01 	call	0x2ac	; 0x2ac <digitalWrite>
	
	digitalWrite(DATA_PIN4,GET_bit(data,0));
 648:	6c 2f       	mov	r22, r28
 64a:	61 70       	andi	r22, 0x01	; 1
 64c:	8a e0       	ldi	r24, 0x0A	; 10
 64e:	0e 94 56 01 	call	0x2ac	; 0x2ac <digitalWrite>
	digitalWrite(DATA_PIN5,GET_bit(data,1));
 652:	c1 fb       	bst	r28, 1
 654:	66 27       	eor	r22, r22
 656:	60 f9       	bld	r22, 0
 658:	8b e0       	ldi	r24, 0x0B	; 11
 65a:	0e 94 56 01 	call	0x2ac	; 0x2ac <digitalWrite>
	digitalWrite(DATA_PIN6,GET_bit(data,2));
 65e:	c2 fb       	bst	r28, 2
 660:	66 27       	eor	r22, r22
 662:	60 f9       	bld	r22, 0
 664:	8c e0       	ldi	r24, 0x0C	; 12
 666:	0e 94 56 01 	call	0x2ac	; 0x2ac <digitalWrite>
	digitalWrite(DATA_PIN7,GET_bit(data,3));
 66a:	c3 fb       	bst	r28, 3
 66c:	66 27       	eor	r22, r22
 66e:	60 f9       	bld	r22, 0
 670:	8e e0       	ldi	r24, 0x0E	; 14
 672:	0e 94 56 01 	call	0x2ac	; 0x2ac <digitalWrite>

	
	digitalWrite(EN_PIN,HIGH);
 676:	61 e0       	ldi	r22, 0x01	; 1
 678:	82 e0       	ldi	r24, 0x02	; 2
 67a:	0e 94 56 01 	call	0x2ac	; 0x2ac <digitalWrite>
 67e:	8f e3       	ldi	r24, 0x3F	; 63
 680:	9f e1       	ldi	r25, 0x1F	; 31
 682:	01 97       	sbiw	r24, 0x01	; 1
 684:	f1 f7       	brne	.-4      	; 0x682 <write4bit+0x8c>
 686:	00 c0       	rjmp	.+0      	; 0x688 <write4bit+0x92>
 688:	00 00       	nop
	_delay_ms(2);
	digitalWrite(EN_PIN,LOW);
 68a:	60 e0       	ldi	r22, 0x00	; 0
 68c:	82 e0       	ldi	r24, 0x02	; 2
 68e:	0e 94 56 01 	call	0x2ac	; 0x2ac <digitalWrite>
	
}
 692:	cf 91       	pop	r28
 694:	08 95       	ret

00000696 <Send_Command>:

void Send_Command(u8 Command){
 696:	cf 93       	push	r28
 698:	c8 2f       	mov	r28, r24

	digitalWrite(RS_PIN,LOW);
 69a:	60 e0       	ldi	r22, 0x00	; 0
 69c:	83 e0       	ldi	r24, 0x03	; 3
 69e:	0e 94 56 01 	call	0x2ac	; 0x2ac <digitalWrite>
	digitalWrite(EN_PIN,LOW);
 6a2:	60 e0       	ldi	r22, 0x00	; 0
 6a4:	82 e0       	ldi	r24, 0x02	; 2
 6a6:	0e 94 56 01 	call	0x2ac	; 0x2ac <digitalWrite>
	
	write4bit(Command);
 6aa:	8c 2f       	mov	r24, r28
 6ac:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <write4bit>

}
 6b0:	cf 91       	pop	r28
 6b2:	08 95       	ret

000006b4 <Send_Data>:

void Send_Data(u8 Data){
 6b4:	cf 93       	push	r28
 6b6:	c8 2f       	mov	r28, r24
	
	digitalWrite(RS_PIN,HIGH);
 6b8:	61 e0       	ldi	r22, 0x01	; 1
 6ba:	83 e0       	ldi	r24, 0x03	; 3
 6bc:	0e 94 56 01 	call	0x2ac	; 0x2ac <digitalWrite>
	digitalWrite(EN_PIN,LOW);
 6c0:	60 e0       	ldi	r22, 0x00	; 0
 6c2:	82 e0       	ldi	r24, 0x02	; 2
 6c4:	0e 94 56 01 	call	0x2ac	; 0x2ac <digitalWrite>

	write4bit(Data);
 6c8:	8c 2f       	mov	r24, r28
 6ca:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <write4bit>
	
}
 6ce:	cf 91       	pop	r28
 6d0:	08 95       	ret

000006d2 <lcdWriteText>:

void lcdWriteText(u8 * text)
{
 6d2:	0f 93       	push	r16
 6d4:	1f 93       	push	r17
 6d6:	cf 93       	push	r28
 6d8:	df 93       	push	r29
 6da:	ec 01       	movw	r28, r24
	
	//Send_Data(text);

	while( *text)
 6dc:	0b c0       	rjmp	.+22     	; 0x6f4 <lcdWriteText+0x22>
	{
		digitalWrite(RS_PIN,HIGH);
 6de:	61 e0       	ldi	r22, 0x01	; 1
 6e0:	83 e0       	ldi	r24, 0x03	; 3
 6e2:	0e 94 56 01 	call	0x2ac	; 0x2ac <digitalWrite>
		Send_Data(*text++);
 6e6:	8e 01       	movw	r16, r28
 6e8:	0f 5f       	subi	r16, 0xFF	; 255
 6ea:	1f 4f       	sbci	r17, 0xFF	; 255
 6ec:	88 81       	ld	r24, Y
 6ee:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Send_Data>
 6f2:	e8 01       	movw	r28, r16
void lcdWriteText(u8 * text)
{
	
	//Send_Data(text);

	while( *text)
 6f4:	88 81       	ld	r24, Y
 6f6:	81 11       	cpse	r24, r1
 6f8:	f2 cf       	rjmp	.-28     	; 0x6de <lcdWriteText+0xc>
	{
		digitalWrite(RS_PIN,HIGH);
		Send_Data(*text++);
	}
}
 6fa:	df 91       	pop	r29
 6fc:	cf 91       	pop	r28
 6fe:	1f 91       	pop	r17
 700:	0f 91       	pop	r16
 702:	08 95       	ret

00000704 <lcdGoToAddr>:


void lcdGoToAddr(u8 addr)
{
	char cmd = 0x80 | addr;
	Send_Command(cmd);
 704:	80 68       	ori	r24, 0x80	; 128
 706:	0e 94 4b 03 	call	0x696	; 0x696 <Send_Command>
 70a:	08 95       	ret

0000070c <lcdGoToXY>:


void lcdGoToXY(u8 x, u8 y)
{
	char addr = 0;
	switch(x)
 70c:	82 30       	cpi	r24, 0x02	; 2
 70e:	31 f0       	breq	.+12     	; 0x71c <lcdGoToXY+0x10>
 710:	83 30       	cpi	r24, 0x03	; 3
 712:	31 f0       	breq	.+12     	; 0x720 <lcdGoToXY+0x14>
 714:	81 30       	cpi	r24, 0x01	; 1
 716:	31 f0       	breq	.+12     	; 0x724 <lcdGoToXY+0x18>
}


void lcdGoToXY(u8 x, u8 y)
{
	char addr = 0;
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	05 c0       	rjmp	.+10     	; 0x726 <lcdGoToXY+0x1a>
	switch(x)
	{
		case 0: addr = 0x00; break; //Starting address of 1st line
		case 1: addr = 0x40; break; //Starting address of 2nd line
		case 2: addr = 0x14; break; //Starting address of 3rd line
 71c:	84 e1       	ldi	r24, 0x14	; 20
 71e:	03 c0       	rjmp	.+6      	; 0x726 <lcdGoToXY+0x1a>
		case 3: addr = 0x54; break; //Starting address of 4th line
 720:	84 e5       	ldi	r24, 0x54	; 84
 722:	01 c0       	rjmp	.+2      	; 0x726 <lcdGoToXY+0x1a>
{
	char addr = 0;
	switch(x)
	{
		case 0: addr = 0x00; break; //Starting address of 1st line
		case 1: addr = 0x40; break; //Starting address of 2nd line
 724:	80 e4       	ldi	r24, 0x40	; 64
		default: ;
	}
	
	addr +=y;
	
	lcdGoToAddr(addr);
 726:	86 0f       	add	r24, r22
 728:	0e 94 82 03 	call	0x704	; 0x704 <lcdGoToAddr>
 72c:	08 95       	ret

0000072e <LCD_Custom_Char>:
	char cmd = 0x80 | addr;
	Send_Command(cmd);
}

void LCD_Custom_Char (u8 loc, u8 *msg)
{
 72e:	0f 93       	push	r16
 730:	1f 93       	push	r17
 732:	cf 93       	push	r28
	unsigned char i;
	if(loc<8)
 734:	88 30       	cpi	r24, 0x08	; 8
 736:	98 f4       	brcc	.+38     	; 0x75e <LCD_Custom_Char+0x30>
 738:	8b 01       	movw	r16, r22
	{
		Send_Command(64 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	08 96       	adiw	r24, 0x08	; 8
 73e:	88 0f       	add	r24, r24
 740:	88 0f       	add	r24, r24
 742:	88 0f       	add	r24, r24
 744:	0e 94 4b 03 	call	0x696	; 0x696 <Send_Command>
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
 748:	c0 e0       	ldi	r28, 0x00	; 0
 74a:	07 c0       	rjmp	.+14     	; 0x75a <LCD_Custom_Char+0x2c>
		Send_Data(msg[i]);
 74c:	f8 01       	movw	r30, r16
 74e:	ec 0f       	add	r30, r28
 750:	f1 1d       	adc	r31, r1
 752:	80 81       	ld	r24, Z
 754:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Send_Data>
{
	unsigned char i;
	if(loc<8)
	{
		Send_Command(64 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
 758:	cf 5f       	subi	r28, 0xFF	; 255
 75a:	c8 30       	cpi	r28, 0x08	; 8
 75c:	b8 f3       	brcs	.-18     	; 0x74c <LCD_Custom_Char+0x1e>
		Send_Data(msg[i]);
	}
}
 75e:	cf 91       	pop	r28
 760:	1f 91       	pop	r17
 762:	0f 91       	pop	r16
 764:	08 95       	ret

00000766 <LCD_CLR>:




void LCD_CLR(){
	Send_Command(0x01);	/* clear display */
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	0e 94 4b 03 	call	0x696	; 0x696 <Send_Command>
	Send_Command(0x80);
 76c:	80 e8       	ldi	r24, 0x80	; 128
 76e:	0e 94 4b 03 	call	0x696	; 0x696 <Send_Command>
 772:	08 95       	ret

00000774 <LCD_INIT>:
#include "DIO_interface.h"
#include <util/delay.h>
#include <stdlib.h>

void LCD_INIT(){
	pinMode(RS_PIN,OUTPUT);
 774:	61 e0       	ldi	r22, 0x01	; 1
 776:	83 e0       	ldi	r24, 0x03	; 3
 778:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <pinMode>
	pinMode(EN_PIN,OUTPUT);
 77c:	61 e0       	ldi	r22, 0x01	; 1
 77e:	82 e0       	ldi	r24, 0x02	; 2
 780:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <pinMode>

	pinMode(DATA_PIN4,OUTPUT);
 784:	61 e0       	ldi	r22, 0x01	; 1
 786:	8a e0       	ldi	r24, 0x0A	; 10
 788:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <pinMode>
	pinMode(DATA_PIN5,OUTPUT);
 78c:	61 e0       	ldi	r22, 0x01	; 1
 78e:	8b e0       	ldi	r24, 0x0B	; 11
 790:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <pinMode>
	pinMode(DATA_PIN6,OUTPUT);
 794:	61 e0       	ldi	r22, 0x01	; 1
 796:	8c e0       	ldi	r24, 0x0C	; 12
 798:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <pinMode>
	pinMode(DATA_PIN7,OUTPUT);
 79c:	61 e0       	ldi	r22, 0x01	; 1
 79e:	8e e0       	ldi	r24, 0x0E	; 14
 7a0:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <pinMode>
 7a4:	2f ef       	ldi	r18, 0xFF	; 255
 7a6:	83 ef       	ldi	r24, 0xF3	; 243
 7a8:	91 e0       	ldi	r25, 0x01	; 1
 7aa:	21 50       	subi	r18, 0x01	; 1
 7ac:	80 40       	sbci	r24, 0x00	; 0
 7ae:	90 40       	sbci	r25, 0x00	; 0
 7b0:	e1 f7       	brne	.-8      	; 0x7aa <LCD_INIT+0x36>
 7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <LCD_INIT+0x40>
 7b4:	00 00       	nop


	_delay_ms(40);
	Send_Command(0x33);
 7b6:	83 e3       	ldi	r24, 0x33	; 51
 7b8:	0e 94 4b 03 	call	0x696	; 0x696 <Send_Command>
 7bc:	8f e3       	ldi	r24, 0x3F	; 63
 7be:	9c e9       	ldi	r25, 0x9C	; 156
 7c0:	01 97       	sbiw	r24, 0x01	; 1
 7c2:	f1 f7       	brne	.-4      	; 0x7c0 <LCD_INIT+0x4c>
 7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <LCD_INIT+0x52>
 7c6:	00 00       	nop
	_delay_ms(10);
	Send_Command(0x32);
 7c8:	82 e3       	ldi	r24, 0x32	; 50
 7ca:	0e 94 4b 03 	call	0x696	; 0x696 <Send_Command>
 7ce:	8f e3       	ldi	r24, 0x3F	; 63
 7d0:	9c e9       	ldi	r25, 0x9C	; 156
 7d2:	01 97       	sbiw	r24, 0x01	; 1
 7d4:	f1 f7       	brne	.-4      	; 0x7d2 <LCD_INIT+0x5e>
 7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <LCD_INIT+0x64>
 7d8:	00 00       	nop
	_delay_ms(10);
	Send_Command(0x28);
 7da:	88 e2       	ldi	r24, 0x28	; 40
 7dc:	0e 94 4b 03 	call	0x696	; 0x696 <Send_Command>
	Send_Command(0x0c);
 7e0:	8c e0       	ldi	r24, 0x0C	; 12
 7e2:	0e 94 4b 03 	call	0x696	; 0x696 <Send_Command>
	LCD_CLR();
 7e6:	0e 94 b3 03 	call	0x766	; 0x766 <LCD_CLR>
 7ea:	08 95       	ret

000007ec <LCD_voidWriteNumber>:
	Send_Command(0x80);
}


void LCD_voidWriteNumber(u32 COPY_u32Number,u8 COPY_u8XPos,u8 COPY_u8YPos)
{
 7ec:	cf 92       	push	r12
 7ee:	df 92       	push	r13
 7f0:	ef 92       	push	r14
 7f2:	ff 92       	push	r15
 7f4:	1f 93       	push	r17
 7f6:	cf 93       	push	r28
 7f8:	df 93       	push	r29
 7fa:	6b 01       	movw	r12, r22
 7fc:	7c 01       	movw	r14, r24
 7fe:	d4 2f       	mov	r29, r20
 800:	12 2f       	mov	r17, r18
	if(COPY_u32Number == 0){
 802:	61 15       	cp	r22, r1
 804:	71 05       	cpc	r23, r1
 806:	81 05       	cpc	r24, r1
 808:	91 05       	cpc	r25, r1
 80a:	71 f4       	brne	.+28     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
		Send_Data('0');
 80c:	80 e3       	ldi	r24, 0x30	; 48
 80e:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Send_Data>
		return;
 812:	92 c0       	rjmp	.+292    	; 0x938 <__stack+0xd9>
	u8 Local_u8digit = 0;
	u8 Local_u8NumOfDigits =0;
	u32 copy = COPY_u32Number;
	while (copy != 0)
	{
		copy = copy/10;
 814:	ca 01       	movw	r24, r20
 816:	b9 01       	movw	r22, r18
 818:	2a e0       	ldi	r18, 0x0A	; 10
 81a:	30 e0       	ldi	r19, 0x00	; 0
 81c:	40 e0       	ldi	r20, 0x00	; 0
 81e:	50 e0       	ldi	r21, 0x00	; 0
 820:	0e 94 4a 06 	call	0xc94	; 0xc94 <__udivmodsi4>
		Local_u8NumOfDigits++;
 824:	cf 5f       	subi	r28, 0xFF	; 255
 826:	03 c0       	rjmp	.+6      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 828:	9b 01       	movw	r18, r22
 82a:	ac 01       	movw	r20, r24
 82c:	c0 e0       	ldi	r28, 0x00	; 0
		return;
	}
	u8 Local_u8digit = 0;
	u8 Local_u8NumOfDigits =0;
	u32 copy = COPY_u32Number;
	while (copy != 0)
 82e:	21 15       	cp	r18, r1
 830:	31 05       	cpc	r19, r1
 832:	41 05       	cpc	r20, r1
 834:	51 05       	cpc	r21, r1
 836:	71 f7       	brne	.-36     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
	{
		copy = copy/10;
		Local_u8NumOfDigits++;
	}
	Local_u8NumOfDigits--;
 838:	c1 50       	subi	r28, 0x01	; 1
	while (COPY_u32Number != 0)
 83a:	78 c0       	rjmp	.+240    	; 0x92c <__stack+0xcd>
	{
		Local_u8digit = COPY_u32Number %10;
		COPY_u32Number = COPY_u32Number /10;
 83c:	c7 01       	movw	r24, r14
 83e:	b6 01       	movw	r22, r12
 840:	2a e0       	ldi	r18, 0x0A	; 10
 842:	30 e0       	ldi	r19, 0x00	; 0
 844:	40 e0       	ldi	r20, 0x00	; 0
 846:	50 e0       	ldi	r21, 0x00	; 0
 848:	0e 94 4a 06 	call	0xc94	; 0xc94 <__udivmodsi4>
 84c:	69 01       	movw	r12, r18
 84e:	7a 01       	movw	r14, r20

		switch (Local_u8digit)
 850:	86 2f       	mov	r24, r22
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	8a 30       	cpi	r24, 0x0A	; 10
 856:	91 05       	cpc	r25, r1
 858:	08 f0       	brcs	.+2      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 85a:	68 c0       	rjmp	.+208    	; 0x92c <__stack+0xcd>
 85c:	fc 01       	movw	r30, r24
 85e:	e8 51       	subi	r30, 0x18	; 24
 860:	ff 4f       	sbci	r31, 0xFF	; 255
 862:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__tablejump2__>
		{
			case 0 :
			lcdGoToXY(COPY_u8XPos,Local_u8NumOfDigits + COPY_u8YPos);
 866:	6c 2f       	mov	r22, r28
 868:	61 0f       	add	r22, r17
 86a:	8d 2f       	mov	r24, r29
 86c:	0e 94 86 03 	call	0x70c	; 0x70c <lcdGoToXY>
			Send_Data('0');
 870:	80 e3       	ldi	r24, 0x30	; 48
 872:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Send_Data>
			Local_u8NumOfDigits--;
 876:	c1 50       	subi	r28, 0x01	; 1
			break;
 878:	59 c0       	rjmp	.+178    	; 0x92c <__stack+0xcd>
			case 1 :
			lcdGoToXY(COPY_u8XPos,Local_u8NumOfDigits + COPY_u8YPos);
 87a:	6c 2f       	mov	r22, r28
 87c:	61 0f       	add	r22, r17
 87e:	8d 2f       	mov	r24, r29
 880:	0e 94 86 03 	call	0x70c	; 0x70c <lcdGoToXY>
			Send_Data('1');
 884:	81 e3       	ldi	r24, 0x31	; 49
 886:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Send_Data>
			Local_u8NumOfDigits--;
 88a:	c1 50       	subi	r28, 0x01	; 1
			break;
 88c:	4f c0       	rjmp	.+158    	; 0x92c <__stack+0xcd>
			case 2 :
			lcdGoToXY(COPY_u8XPos,Local_u8NumOfDigits + COPY_u8YPos);
 88e:	6c 2f       	mov	r22, r28
 890:	61 0f       	add	r22, r17
 892:	8d 2f       	mov	r24, r29
 894:	0e 94 86 03 	call	0x70c	; 0x70c <lcdGoToXY>
			Send_Data('2');
 898:	82 e3       	ldi	r24, 0x32	; 50
 89a:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Send_Data>
			Local_u8NumOfDigits--;
 89e:	c1 50       	subi	r28, 0x01	; 1
			break;
 8a0:	45 c0       	rjmp	.+138    	; 0x92c <__stack+0xcd>
			case 3 :
			lcdGoToXY(COPY_u8XPos,Local_u8NumOfDigits + COPY_u8YPos);
 8a2:	6c 2f       	mov	r22, r28
 8a4:	61 0f       	add	r22, r17
 8a6:	8d 2f       	mov	r24, r29
 8a8:	0e 94 86 03 	call	0x70c	; 0x70c <lcdGoToXY>
			Send_Data('3');
 8ac:	83 e3       	ldi	r24, 0x33	; 51
 8ae:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Send_Data>
			Local_u8NumOfDigits--;
 8b2:	c1 50       	subi	r28, 0x01	; 1
			break;
 8b4:	3b c0       	rjmp	.+118    	; 0x92c <__stack+0xcd>
			case 4 :
			lcdGoToXY(COPY_u8XPos,Local_u8NumOfDigits + COPY_u8YPos);
 8b6:	6c 2f       	mov	r22, r28
 8b8:	61 0f       	add	r22, r17
 8ba:	8d 2f       	mov	r24, r29
 8bc:	0e 94 86 03 	call	0x70c	; 0x70c <lcdGoToXY>
			Send_Data('4');
 8c0:	84 e3       	ldi	r24, 0x34	; 52
 8c2:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Send_Data>
			Local_u8NumOfDigits--;
 8c6:	c1 50       	subi	r28, 0x01	; 1
			break;
 8c8:	31 c0       	rjmp	.+98     	; 0x92c <__stack+0xcd>
			case 5 :
			lcdGoToXY(COPY_u8XPos,Local_u8NumOfDigits + COPY_u8YPos);
 8ca:	6c 2f       	mov	r22, r28
 8cc:	61 0f       	add	r22, r17
 8ce:	8d 2f       	mov	r24, r29
 8d0:	0e 94 86 03 	call	0x70c	; 0x70c <lcdGoToXY>
			Send_Data('5');
 8d4:	85 e3       	ldi	r24, 0x35	; 53
 8d6:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Send_Data>
			Local_u8NumOfDigits--;
 8da:	c1 50       	subi	r28, 0x01	; 1
			break;
 8dc:	27 c0       	rjmp	.+78     	; 0x92c <__stack+0xcd>

			case 6 :
			lcdGoToXY(COPY_u8XPos,Local_u8NumOfDigits + COPY_u8YPos);
 8de:	6c 2f       	mov	r22, r28
 8e0:	61 0f       	add	r22, r17
 8e2:	8d 2f       	mov	r24, r29
 8e4:	0e 94 86 03 	call	0x70c	; 0x70c <lcdGoToXY>
			Send_Data('6');
 8e8:	86 e3       	ldi	r24, 0x36	; 54
 8ea:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Send_Data>
			Local_u8NumOfDigits--;
 8ee:	c1 50       	subi	r28, 0x01	; 1
			break;
 8f0:	1d c0       	rjmp	.+58     	; 0x92c <__stack+0xcd>

			case 7 :
			lcdGoToXY(COPY_u8XPos,Local_u8NumOfDigits + COPY_u8YPos);
 8f2:	6c 2f       	mov	r22, r28
 8f4:	61 0f       	add	r22, r17
 8f6:	8d 2f       	mov	r24, r29
 8f8:	0e 94 86 03 	call	0x70c	; 0x70c <lcdGoToXY>
			Send_Data('7');
 8fc:	87 e3       	ldi	r24, 0x37	; 55
 8fe:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Send_Data>
			Local_u8NumOfDigits--;
 902:	c1 50       	subi	r28, 0x01	; 1
			break;
 904:	13 c0       	rjmp	.+38     	; 0x92c <__stack+0xcd>

			case 8 :
			lcdGoToXY(COPY_u8XPos,Local_u8NumOfDigits + COPY_u8YPos);
 906:	6c 2f       	mov	r22, r28
 908:	61 0f       	add	r22, r17
 90a:	8d 2f       	mov	r24, r29
 90c:	0e 94 86 03 	call	0x70c	; 0x70c <lcdGoToXY>
			Send_Data('8');
 910:	88 e3       	ldi	r24, 0x38	; 56
 912:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Send_Data>
			Local_u8NumOfDigits--;
 916:	c1 50       	subi	r28, 0x01	; 1
			break;
 918:	09 c0       	rjmp	.+18     	; 0x92c <__stack+0xcd>
			case 9 :
			lcdGoToXY(COPY_u8XPos,Local_u8NumOfDigits + COPY_u8YPos);
 91a:	6c 2f       	mov	r22, r28
 91c:	61 0f       	add	r22, r17
 91e:	8d 2f       	mov	r24, r29
 920:	0e 94 86 03 	call	0x70c	; 0x70c <lcdGoToXY>
			Send_Data('9');
 924:	89 e3       	ldi	r24, 0x39	; 57
 926:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Send_Data>
			Local_u8NumOfDigits--;
 92a:	c1 50       	subi	r28, 0x01	; 1
	{
		copy = copy/10;
		Local_u8NumOfDigits++;
	}
	Local_u8NumOfDigits--;
	while (COPY_u32Number != 0)
 92c:	c1 14       	cp	r12, r1
 92e:	d1 04       	cpc	r13, r1
 930:	e1 04       	cpc	r14, r1
 932:	f1 04       	cpc	r15, r1
 934:	09 f0       	breq	.+2      	; 0x938 <__stack+0xd9>
 936:	82 cf       	rjmp	.-252    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
			Send_Data('9');
			Local_u8NumOfDigits--;
			break;
		}
	}
 938:	df 91       	pop	r29
 93a:	cf 91       	pop	r28
 93c:	1f 91       	pop	r17
 93e:	ff 90       	pop	r15
 940:	ef 90       	pop	r14
 942:	df 90       	pop	r13
 944:	cf 90       	pop	r12
 946:	08 95       	ret

00000948 <main>:
	return (u16)celsius;
}


int main(void)
{
 948:	cf 93       	push	r28
 94a:	df 93       	push	r29
 94c:	cd b7       	in	r28, 0x3d	; 61
 94e:	de b7       	in	r29, 0x3e	; 62
 950:	68 97       	sbiw	r28, 0x18	; 24
 952:	0f b6       	in	r0, 0x3f	; 63
 954:	f8 94       	cli
 956:	de bf       	out	0x3e, r29	; 62
 958:	0f be       	out	0x3f, r0	; 63
 95a:	cd bf       	out	0x3d, r28	; 61
	ADC_Init();
 95c:	0e 94 11 01 	call	0x222	; 0x222 <ADC_Init>
	LCD_INIT();
 960:	0e 94 ba 03 	call	0x774	; 0x774 <LCD_INIT>
	TIMER0_void_Init();
 964:	0e 94 9c 05 	call	0xb38	; 0xb38 <TIMER0_void_Init>
	pinMode(PB3,OUTPUT);
 968:	61 e0       	ldi	r22, 0x01	; 1
 96a:	8d e0       	ldi	r24, 0x0D	; 13
 96c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <pinMode>
	u16 adc_val=0;
	u16 brightness=0;
	
	u8 Sleeping[8] = { 0x0E, 0x0E, 0x04, 0x04, 0x0E, 0x15, 0x0A, 0x11};
 970:	88 e0       	ldi	r24, 0x08	; 8
 972:	e0 e6       	ldi	r30, 0x60	; 96
 974:	f0 e0       	ldi	r31, 0x00	; 0
 976:	de 01       	movw	r26, r28
 978:	11 96       	adiw	r26, 0x01	; 1
 97a:	01 90       	ld	r0, Z+
 97c:	0d 92       	st	X+, r0
 97e:	8a 95       	dec	r24
 980:	e1 f7       	brne	.-8      	; 0x97a <main+0x32>
	u8 Idle[8] = { 0x0E, 0x0E, 0x04, 0x04, 0x1F, 0x04, 0x0A, 0x11};
 982:	88 e0       	ldi	r24, 0x08	; 8
 984:	e8 e6       	ldi	r30, 0x68	; 104
 986:	f0 e0       	ldi	r31, 0x00	; 0
 988:	de 01       	movw	r26, r28
 98a:	19 96       	adiw	r26, 0x09	; 9
 98c:	01 90       	ld	r0, Z+
 98e:	0d 92       	st	X+, r0
 990:	8a 95       	dec	r24
 992:	e1 f7       	brne	.-8      	; 0x98c <main+0x44>
	u8 Active[8] = { 0x0E, 0x0E, 0x04, 0x15, 0x0E, 0x04, 0x0A, 0x11};
 994:	88 e0       	ldi	r24, 0x08	; 8
 996:	e0 e7       	ldi	r30, 0x70	; 112
 998:	f0 e0       	ldi	r31, 0x00	; 0
 99a:	de 01       	movw	r26, r28
 99c:	51 96       	adiw	r26, 0x11	; 17
 99e:	01 90       	ld	r0, Z+
 9a0:	0d 92       	st	X+, r0
 9a2:	8a 95       	dec	r24
 9a4:	e1 f7       	brne	.-8      	; 0x99e <main+0x56>
	
	LCD_Custom_Char(0, Active);
 9a6:	be 01       	movw	r22, r28
 9a8:	6f 5e       	subi	r22, 0xEF	; 239
 9aa:	7f 4f       	sbci	r23, 0xFF	; 255
 9ac:	80 e0       	ldi	r24, 0x00	; 0
 9ae:	0e 94 97 03 	call	0x72e	; 0x72e <LCD_Custom_Char>
	LCD_Custom_Char(1, Idle);
 9b2:	be 01       	movw	r22, r28
 9b4:	67 5f       	subi	r22, 0xF7	; 247
 9b6:	7f 4f       	sbci	r23, 0xFF	; 255
 9b8:	81 e0       	ldi	r24, 0x01	; 1
 9ba:	0e 94 97 03 	call	0x72e	; 0x72e <LCD_Custom_Char>
	LCD_Custom_Char(2, Sleeping);
 9be:	be 01       	movw	r22, r28
 9c0:	6f 5f       	subi	r22, 0xFF	; 255
 9c2:	7f 4f       	sbci	r23, 0xFF	; 255
 9c4:	82 e0       	ldi	r24, 0x02	; 2
 9c6:	0e 94 97 03 	call	0x72e	; 0x72e <LCD_Custom_Char>
	
    while (1) 
    {
	adc_val = ADC_Read(0);
 9ca:	80 e0       	ldi	r24, 0x00	; 0
 9cc:	0e 94 16 01 	call	0x22c	; 0x22c <ADC_Read>
	
	brightness = 100 - map(adc_val,30,900,0,100);
 9d0:	bc 01       	movw	r22, r24
 9d2:	80 e0       	ldi	r24, 0x00	; 0
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	1f 92       	push	r1
 9d8:	1f 92       	push	r1
 9da:	1f 92       	push	r1
 9dc:	24 e6       	ldi	r18, 0x64	; 100
 9de:	2f 93       	push	r18
 9e0:	a1 2c       	mov	r10, r1
 9e2:	b1 2c       	mov	r11, r1
 9e4:	65 01       	movw	r12, r10
 9e6:	14 e8       	ldi	r17, 0x84	; 132
 9e8:	e1 2e       	mov	r14, r17
 9ea:	13 e0       	ldi	r17, 0x03	; 3
 9ec:	f1 2e       	mov	r15, r17
 9ee:	00 e0       	ldi	r16, 0x00	; 0
 9f0:	10 e0       	ldi	r17, 0x00	; 0
 9f2:	2e e1       	ldi	r18, 0x1E	; 30
 9f4:	30 e0       	ldi	r19, 0x00	; 0
 9f6:	40 e0       	ldi	r20, 0x00	; 0
 9f8:	50 e0       	ldi	r21, 0x00	; 0
 9fa:	0e 94 59 05 	call	0xab2	; 0xab2 <map>
 9fe:	6b 01       	movw	r12, r22
 a00:	7c 01       	movw	r14, r24
 a02:	04 e6       	ldi	r16, 0x64	; 100
 a04:	10 e0       	ldi	r17, 0x00	; 0
 a06:	06 1b       	sub	r16, r22
 a08:	17 0b       	sbc	r17, r23
	lcdGoToXY(0,0);
 a0a:	60 e0       	ldi	r22, 0x00	; 0
 a0c:	80 e0       	ldi	r24, 0x00	; 0
 a0e:	0e 94 86 03 	call	0x70c	; 0x70c <lcdGoToXY>
	lcdWriteText("Brightness=");
 a12:	88 e7       	ldi	r24, 0x78	; 120
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	0e 94 69 03 	call	0x6d2	; 0x6d2 <lcdWriteText>
	LCD_voidWriteNumber(brightness,0,11);
 a1a:	b8 01       	movw	r22, r16
 a1c:	80 e0       	ldi	r24, 0x00	; 0
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	2b e0       	ldi	r18, 0x0B	; 11
 a22:	40 e0       	ldi	r20, 0x00	; 0
 a24:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_voidWriteNumber>
	
	if(brightness>9){
 a28:	0f 90       	pop	r0
 a2a:	0f 90       	pop	r0
 a2c:	0f 90       	pop	r0
 a2e:	0f 90       	pop	r0
 a30:	0a 30       	cpi	r16, 0x0A	; 10
 a32:	11 05       	cpc	r17, r1
 a34:	28 f0       	brcs	.+10     	; 0xa40 <main+0xf8>
		lcdGoToXY(0,13);
 a36:	6d e0       	ldi	r22, 0x0D	; 13
 a38:	80 e0       	ldi	r24, 0x00	; 0
 a3a:	0e 94 86 03 	call	0x70c	; 0x70c <lcdGoToXY>
 a3e:	04 c0       	rjmp	.+8      	; 0xa48 <main+0x100>
	}
	else{
		lcdGoToXY(0,12);
 a40:	6c e0       	ldi	r22, 0x0C	; 12
 a42:	80 e0       	ldi	r24, 0x00	; 0
 a44:	0e 94 86 03 	call	0x70c	; 0x70c <lcdGoToXY>
	}
	
	Send_Data('%');
 a48:	85 e2       	ldi	r24, 0x25	; 37
 a4a:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Send_Data>

	if(brightness>25 && brightness<75){
 a4e:	8a e4       	ldi	r24, 0x4A	; 74
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	8c 19       	sub	r24, r12
 a54:	9d 09       	sbc	r25, r13
 a56:	c1 97       	sbiw	r24, 0x31	; 49
 a58:	40 f4       	brcc	.+16     	; 0xa6a <main+0x122>
		lcdGoToXY(1,0);
 a5a:	60 e0       	ldi	r22, 0x00	; 0
 a5c:	81 e0       	ldi	r24, 0x01	; 1
 a5e:	0e 94 86 03 	call	0x70c	; 0x70c <lcdGoToXY>
		Send_Data(1);
 a62:	81 e0       	ldi	r24, 0x01	; 1
 a64:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Send_Data>
 a68:	15 c0       	rjmp	.+42     	; 0xa94 <main+0x14c>
	}
	else if(brightness>=75){
 a6a:	0b 34       	cpi	r16, 0x4B	; 75
 a6c:	11 05       	cpc	r17, r1
 a6e:	40 f0       	brcs	.+16     	; 0xa80 <main+0x138>
		lcdGoToXY(1,0);
 a70:	60 e0       	ldi	r22, 0x00	; 0
 a72:	81 e0       	ldi	r24, 0x01	; 1
 a74:	0e 94 86 03 	call	0x70c	; 0x70c <lcdGoToXY>
		Send_Data(0);
 a78:	80 e0       	ldi	r24, 0x00	; 0
 a7a:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Send_Data>
 a7e:	0a c0       	rjmp	.+20     	; 0xa94 <main+0x14c>
	}
	else if(brightness<=25){
 a80:	0a 31       	cpi	r16, 0x1A	; 26
 a82:	11 05       	cpc	r17, r1
 a84:	38 f4       	brcc	.+14     	; 0xa94 <main+0x14c>
		lcdGoToXY(1,0);
 a86:	60 e0       	ldi	r22, 0x00	; 0
 a88:	81 e0       	ldi	r24, 0x01	; 1
 a8a:	0e 94 86 03 	call	0x70c	; 0x70c <lcdGoToXY>
		Send_Data(2);
 a8e:	82 e0       	ldi	r24, 0x02	; 2
 a90:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Send_Data>
	}
	
	TIMER0_void_SetCompareVal(brightness);
 a94:	80 2f       	mov	r24, r16
 a96:	0e 94 c0 05 	call	0xb80	; 0xb80 <TIMER0_void_SetCompareVal>
 a9a:	2f ef       	ldi	r18, 0xFF	; 255
 a9c:	8d ee       	ldi	r24, 0xED	; 237
 a9e:	92 e0       	ldi	r25, 0x02	; 2
 aa0:	21 50       	subi	r18, 0x01	; 1
 aa2:	80 40       	sbci	r24, 0x00	; 0
 aa4:	90 40       	sbci	r25, 0x00	; 0
 aa6:	e1 f7       	brne	.-8      	; 0xaa0 <main+0x158>
 aa8:	00 c0       	rjmp	.+0      	; 0xaaa <main+0x162>
 aaa:	00 00       	nop

	_delay_ms(60);
	LCD_CLR();
 aac:	0e 94 b3 03 	call	0x766	; 0x766 <LCD_CLR>


	}
 ab0:	8c cf       	rjmp	.-232    	; 0x9ca <main+0x82>

00000ab2 <map>:
 *  Author: MostafaElSadaad
 */ 
#include "STD_TYPES.h"

u32 map(u32 x, u32 in_min, u32 in_max, u32 out_min, u32 out_max)
{
 ab2:	4f 92       	push	r4
 ab4:	5f 92       	push	r5
 ab6:	6f 92       	push	r6
 ab8:	7f 92       	push	r7
 aba:	af 92       	push	r10
 abc:	bf 92       	push	r11
 abe:	cf 92       	push	r12
 ac0:	df 92       	push	r13
 ac2:	ef 92       	push	r14
 ac4:	ff 92       	push	r15
 ac6:	0f 93       	push	r16
 ac8:	1f 93       	push	r17
 aca:	cf 93       	push	r28
 acc:	df 93       	push	r29
 ace:	cd b7       	in	r28, 0x3d	; 61
 ad0:	de b7       	in	r29, 0x3e	; 62
 ad2:	29 01       	movw	r4, r18
 ad4:	3a 01       	movw	r6, r20
	return  (x - in_min) * (out_max - out_min) / ((in_max - in_min) + out_min);
 ad6:	9b 01       	movw	r18, r22
 ad8:	ac 01       	movw	r20, r24
 ada:	24 19       	sub	r18, r4
 adc:	35 09       	sbc	r19, r5
 ade:	46 09       	sbc	r20, r6
 ae0:	57 09       	sbc	r21, r7
 ae2:	89 89       	ldd	r24, Y+17	; 0x11
 ae4:	9a 89       	ldd	r25, Y+18	; 0x12
 ae6:	ab 89       	ldd	r26, Y+19	; 0x13
 ae8:	bc 89       	ldd	r27, Y+20	; 0x14
 aea:	bc 01       	movw	r22, r24
 aec:	cd 01       	movw	r24, r26
 aee:	6a 19       	sub	r22, r10
 af0:	7b 09       	sbc	r23, r11
 af2:	8c 09       	sbc	r24, r12
 af4:	9d 09       	sbc	r25, r13
 af6:	0e 94 3a 06 	call	0xc74	; 0xc74 <__mulsi3>
 afa:	98 01       	movw	r18, r16
 afc:	87 01       	movw	r16, r14
 afe:	04 19       	sub	r16, r4
 b00:	15 09       	sbc	r17, r5
 b02:	26 09       	sbc	r18, r6
 b04:	37 09       	sbc	r19, r7
 b06:	a9 01       	movw	r20, r18
 b08:	98 01       	movw	r18, r16
 b0a:	2a 0d       	add	r18, r10
 b0c:	3b 1d       	adc	r19, r11
 b0e:	4c 1d       	adc	r20, r12
 b10:	5d 1d       	adc	r21, r13
 b12:	0e 94 4a 06 	call	0xc94	; 0xc94 <__udivmodsi4>
 b16:	ca 01       	movw	r24, r20
 b18:	b9 01       	movw	r22, r18
 b1a:	df 91       	pop	r29
 b1c:	cf 91       	pop	r28
 b1e:	1f 91       	pop	r17
 b20:	0f 91       	pop	r16
 b22:	ff 90       	pop	r15
 b24:	ef 90       	pop	r14
 b26:	df 90       	pop	r13
 b28:	cf 90       	pop	r12
 b2a:	bf 90       	pop	r11
 b2c:	af 90       	pop	r10
 b2e:	7f 90       	pop	r7
 b30:	6f 90       	pop	r6
 b32:	5f 90       	pop	r5
 b34:	4f 90       	pop	r4
 b36:	08 95       	ret

00000b38 <TIMER0_void_Init>:
	TIMER0_OV_CallBack = Copy_ptr ;
}

void TIMER0_void_SetCTCCallBack(void (*Copy_ptr) (void) )
{
	TIMER0_CTC_CallBack = Copy_ptr ;
 b38:	83 b7       	in	r24, 0x33	; 51
 b3a:	80 64       	ori	r24, 0x40	; 64
 b3c:	83 bf       	out	0x33, r24	; 51
 b3e:	83 b7       	in	r24, 0x33	; 51
 b40:	88 60       	ori	r24, 0x08	; 8
 b42:	83 bf       	out	0x33, r24	; 51
 b44:	83 b7       	in	r24, 0x33	; 51
 b46:	81 60       	ori	r24, 0x01	; 1
 b48:	83 bf       	out	0x33, r24	; 51
 b4a:	83 b7       	in	r24, 0x33	; 51
 b4c:	8d 7f       	andi	r24, 0xFD	; 253
 b4e:	83 bf       	out	0x33, r24	; 51
 b50:	83 b7       	in	r24, 0x33	; 51
 b52:	84 60       	ori	r24, 0x04	; 4
 b54:	83 bf       	out	0x33, r24	; 51
 b56:	83 b7       	in	r24, 0x33	; 51
 b58:	8f 7e       	andi	r24, 0xEF	; 239
 b5a:	83 bf       	out	0x33, r24	; 51
 b5c:	83 b7       	in	r24, 0x33	; 51
 b5e:	80 62       	ori	r24, 0x20	; 32
 b60:	83 bf       	out	0x33, r24	; 51
 b62:	89 b7       	in	r24, 0x39	; 57
 b64:	8e 7f       	andi	r24, 0xFE	; 254
 b66:	89 bf       	out	0x39, r24	; 57
 b68:	89 b7       	in	r24, 0x39	; 57
 b6a:	8d 7f       	andi	r24, 0xFD	; 253
 b6c:	89 bf       	out	0x39, r24	; 57
 b6e:	88 b7       	in	r24, 0x38	; 56
 b70:	81 60       	ori	r24, 0x01	; 1
 b72:	88 bf       	out	0x38, r24	; 56
 b74:	88 b7       	in	r24, 0x38	; 56
 b76:	82 60       	ori	r24, 0x02	; 2
 b78:	88 bf       	out	0x38, r24	; 56
 b7a:	12 be       	out	0x32, r1	; 50
 b7c:	1c be       	out	0x3c, r1	; 60
 b7e:	08 95       	ret

00000b80 <TIMER0_void_SetCompareVal>:
 b80:	af 92       	push	r10
 b82:	bf 92       	push	r11
 b84:	cf 92       	push	r12
 b86:	df 92       	push	r13
 b88:	ef 92       	push	r14
 b8a:	ff 92       	push	r15
 b8c:	0f 93       	push	r16
 b8e:	1f 93       	push	r17
 b90:	68 2f       	mov	r22, r24
 b92:	70 e0       	ldi	r23, 0x00	; 0
 b94:	80 e0       	ldi	r24, 0x00	; 0
 b96:	90 e0       	ldi	r25, 0x00	; 0
 b98:	1f 92       	push	r1
 b9a:	1f 92       	push	r1
 b9c:	1f 92       	push	r1
 b9e:	2f ef       	ldi	r18, 0xFF	; 255
 ba0:	2f 93       	push	r18
 ba2:	a1 2c       	mov	r10, r1
 ba4:	b1 2c       	mov	r11, r1
 ba6:	65 01       	movw	r12, r10
 ba8:	14 e6       	ldi	r17, 0x64	; 100
 baa:	e1 2e       	mov	r14, r17
 bac:	f1 2c       	mov	r15, r1
 bae:	00 e0       	ldi	r16, 0x00	; 0
 bb0:	10 e0       	ldi	r17, 0x00	; 0
 bb2:	20 e0       	ldi	r18, 0x00	; 0
 bb4:	30 e0       	ldi	r19, 0x00	; 0
 bb6:	a9 01       	movw	r20, r18
 bb8:	0e 94 59 05 	call	0xab2	; 0xab2 <map>
 bbc:	6c bf       	out	0x3c, r22	; 60
 bbe:	0f 90       	pop	r0
 bc0:	0f 90       	pop	r0
 bc2:	0f 90       	pop	r0
 bc4:	0f 90       	pop	r0
 bc6:	1f 91       	pop	r17
 bc8:	0f 91       	pop	r16
 bca:	ff 90       	pop	r15
 bcc:	ef 90       	pop	r14
 bce:	df 90       	pop	r13
 bd0:	cf 90       	pop	r12
 bd2:	bf 90       	pop	r11
 bd4:	af 90       	pop	r10
 bd6:	08 95       	ret

00000bd8 <__vector_11>:
	
}

void __vector_11(void) __attribute__((signal , used));
void __vector_11(void)
{
 bd8:	1f 92       	push	r1
 bda:	0f 92       	push	r0
 bdc:	0f b6       	in	r0, 0x3f	; 63
 bde:	0f 92       	push	r0
 be0:	11 24       	eor	r1, r1
 be2:	2f 93       	push	r18
 be4:	3f 93       	push	r19
 be6:	4f 93       	push	r20
 be8:	5f 93       	push	r21
 bea:	6f 93       	push	r22
 bec:	7f 93       	push	r23
 bee:	8f 93       	push	r24
 bf0:	9f 93       	push	r25
 bf2:	af 93       	push	r26
 bf4:	bf 93       	push	r27
 bf6:	ef 93       	push	r30
 bf8:	ff 93       	push	r31
	
	TIMER0_OV_CallBack();
 bfa:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <TIMER0_OV_CallBack>
 bfe:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <TIMER0_OV_CallBack+0x1>
 c02:	09 95       	icall
}
 c04:	ff 91       	pop	r31
 c06:	ef 91       	pop	r30
 c08:	bf 91       	pop	r27
 c0a:	af 91       	pop	r26
 c0c:	9f 91       	pop	r25
 c0e:	8f 91       	pop	r24
 c10:	7f 91       	pop	r23
 c12:	6f 91       	pop	r22
 c14:	5f 91       	pop	r21
 c16:	4f 91       	pop	r20
 c18:	3f 91       	pop	r19
 c1a:	2f 91       	pop	r18
 c1c:	0f 90       	pop	r0
 c1e:	0f be       	out	0x3f, r0	; 63
 c20:	0f 90       	pop	r0
 c22:	1f 90       	pop	r1
 c24:	18 95       	reti

00000c26 <__vector_10>:

void __vector_10(void) __attribute__((signal , used));
void __vector_10(void)
{
 c26:	1f 92       	push	r1
 c28:	0f 92       	push	r0
 c2a:	0f b6       	in	r0, 0x3f	; 63
 c2c:	0f 92       	push	r0
 c2e:	11 24       	eor	r1, r1
 c30:	2f 93       	push	r18
 c32:	3f 93       	push	r19
 c34:	4f 93       	push	r20
 c36:	5f 93       	push	r21
 c38:	6f 93       	push	r22
 c3a:	7f 93       	push	r23
 c3c:	8f 93       	push	r24
 c3e:	9f 93       	push	r25
 c40:	af 93       	push	r26
 c42:	bf 93       	push	r27
 c44:	ef 93       	push	r30
 c46:	ff 93       	push	r31
	
	TIMER0_CTC_CallBack();
 c48:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <TIMER0_CTC_CallBack>
 c4c:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <TIMER0_CTC_CallBack+0x1>
 c50:	09 95       	icall
 c52:	ff 91       	pop	r31
 c54:	ef 91       	pop	r30
 c56:	bf 91       	pop	r27
 c58:	af 91       	pop	r26
 c5a:	9f 91       	pop	r25
 c5c:	8f 91       	pop	r24
 c5e:	7f 91       	pop	r23
 c60:	6f 91       	pop	r22
 c62:	5f 91       	pop	r21
 c64:	4f 91       	pop	r20
 c66:	3f 91       	pop	r19
 c68:	2f 91       	pop	r18
 c6a:	0f 90       	pop	r0
 c6c:	0f be       	out	0x3f, r0	; 63
 c6e:	0f 90       	pop	r0
 c70:	1f 90       	pop	r1
 c72:	18 95       	reti

00000c74 <__mulsi3>:
 c74:	db 01       	movw	r26, r22
 c76:	8f 93       	push	r24
 c78:	9f 93       	push	r25
 c7a:	0e 94 72 06 	call	0xce4	; 0xce4 <__muluhisi3>
 c7e:	bf 91       	pop	r27
 c80:	af 91       	pop	r26
 c82:	a2 9f       	mul	r26, r18
 c84:	80 0d       	add	r24, r0
 c86:	91 1d       	adc	r25, r1
 c88:	a3 9f       	mul	r26, r19
 c8a:	90 0d       	add	r25, r0
 c8c:	b2 9f       	mul	r27, r18
 c8e:	90 0d       	add	r25, r0
 c90:	11 24       	eor	r1, r1
 c92:	08 95       	ret

00000c94 <__udivmodsi4>:
 c94:	a1 e2       	ldi	r26, 0x21	; 33
 c96:	1a 2e       	mov	r1, r26
 c98:	aa 1b       	sub	r26, r26
 c9a:	bb 1b       	sub	r27, r27
 c9c:	fd 01       	movw	r30, r26
 c9e:	0d c0       	rjmp	.+26     	; 0xcba <__udivmodsi4_ep>

00000ca0 <__udivmodsi4_loop>:
 ca0:	aa 1f       	adc	r26, r26
 ca2:	bb 1f       	adc	r27, r27
 ca4:	ee 1f       	adc	r30, r30
 ca6:	ff 1f       	adc	r31, r31
 ca8:	a2 17       	cp	r26, r18
 caa:	b3 07       	cpc	r27, r19
 cac:	e4 07       	cpc	r30, r20
 cae:	f5 07       	cpc	r31, r21
 cb0:	20 f0       	brcs	.+8      	; 0xcba <__udivmodsi4_ep>
 cb2:	a2 1b       	sub	r26, r18
 cb4:	b3 0b       	sbc	r27, r19
 cb6:	e4 0b       	sbc	r30, r20
 cb8:	f5 0b       	sbc	r31, r21

00000cba <__udivmodsi4_ep>:
 cba:	66 1f       	adc	r22, r22
 cbc:	77 1f       	adc	r23, r23
 cbe:	88 1f       	adc	r24, r24
 cc0:	99 1f       	adc	r25, r25
 cc2:	1a 94       	dec	r1
 cc4:	69 f7       	brne	.-38     	; 0xca0 <__udivmodsi4_loop>
 cc6:	60 95       	com	r22
 cc8:	70 95       	com	r23
 cca:	80 95       	com	r24
 ccc:	90 95       	com	r25
 cce:	9b 01       	movw	r18, r22
 cd0:	ac 01       	movw	r20, r24
 cd2:	bd 01       	movw	r22, r26
 cd4:	cf 01       	movw	r24, r30
 cd6:	08 95       	ret

00000cd8 <__tablejump2__>:
 cd8:	ee 0f       	add	r30, r30
 cda:	ff 1f       	adc	r31, r31
 cdc:	05 90       	lpm	r0, Z+
 cde:	f4 91       	lpm	r31, Z
 ce0:	e0 2d       	mov	r30, r0
 ce2:	09 94       	ijmp

00000ce4 <__muluhisi3>:
 ce4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__umulhisi3>
 ce8:	a5 9f       	mul	r26, r21
 cea:	90 0d       	add	r25, r0
 cec:	b4 9f       	mul	r27, r20
 cee:	90 0d       	add	r25, r0
 cf0:	a4 9f       	mul	r26, r20
 cf2:	80 0d       	add	r24, r0
 cf4:	91 1d       	adc	r25, r1
 cf6:	11 24       	eor	r1, r1
 cf8:	08 95       	ret

00000cfa <__umulhisi3>:
 cfa:	a2 9f       	mul	r26, r18
 cfc:	b0 01       	movw	r22, r0
 cfe:	b3 9f       	mul	r27, r19
 d00:	c0 01       	movw	r24, r0
 d02:	a3 9f       	mul	r26, r19
 d04:	70 0d       	add	r23, r0
 d06:	81 1d       	adc	r24, r1
 d08:	11 24       	eor	r1, r1
 d0a:	91 1d       	adc	r25, r1
 d0c:	b2 9f       	mul	r27, r18
 d0e:	70 0d       	add	r23, r0
 d10:	81 1d       	adc	r24, r1
 d12:	11 24       	eor	r1, r1
 d14:	91 1d       	adc	r25, r1
 d16:	08 95       	ret

00000d18 <_exit>:
 d18:	f8 94       	cli

00000d1a <__stop_program>:
 d1a:	ff cf       	rjmp	.-2      	; 0xd1a <__stop_program>
